{"version":3,"sources":["serviceWorker.js","components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","NavBar","props","totalCounter","className","Counter","this","onIncrement","counter","onDelete","getBadgeClasses","formatCount","onClick","id","classes","value","Component","counters","onReset","map","key","selected","App","state","handleDelete","counterId","filter","setState","handleIncrement","index","indexOf","handleReset","c","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCHSC,G,MAbC,SAACC,GAAW,IAEhBC,EAAiBD,EAAjBC,aACR,OACQ,yBAAKC,UAAU,oCACX,0BAAMA,UAAU,wBAAhB,UACY,GACpB,0BAAMA,UAAU,yBAAyBD,OCyClCE,E,uKArCH,IAAD,EAEoCC,KAAKJ,MAAxCK,EAFD,EAECA,YAAaC,EAFd,EAEcA,QAASC,EAFvB,EAEuBA,SAE9B,OACE,6BACE,0BAAML,UAAWE,KAAKI,mBAAtB,IAA2CJ,KAAKK,cAAhD,KACA,4BACEC,QAAS,kBAAML,EAAYC,IAC3BJ,UAAU,6BAFZ,aAMA,4BACEQ,QAAS,kBAAMH,EAASD,EAAQK,KAChCT,UAAU,sBAFZ,a,wCAUa,IAEbU,EAAU,mBAEd,OADAA,GAA6B,IAFTR,KAAKJ,MAAjBM,QAEWO,MAAc,UAAY,Y,oCAIhC,IAEPA,EADcT,KAAKJ,MAAjBM,QACcO,MACtB,OAAiB,IAAVA,EAAc,OAASA,M,GA5CZC,aCuBPC,E,uKApBH,IAAD,EAE8CX,KAAKJ,MAAlDgB,EAFD,EAECA,QAASD,EAFV,EAEUA,SAAUR,EAFpB,EAEoBA,SAAUF,EAF9B,EAE8BA,YACrC,OACE,6BACE,4BAAQK,QAASM,EAASd,UAAU,uBAApC,SACCa,EAASE,KAAI,SAACX,GAAD,OACZ,kBAAC,EAAD,CACEC,SAAUA,EACVF,YAAaA,EACbC,QAASA,EACTY,IAAKZ,EAAQK,GACbQ,UAAU,Y,GAdCL,aC0DRM,E,4MAtDbC,MAAQ,CACNN,SAAU,CACR,CAAEJ,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,K,EAIpBS,aAAe,SAACC,GACd,IAAMR,EAAW,EAAKM,MAAMN,SAASS,QAAQ,SAAAlB,GAAO,OAAIA,EAAQK,KAAOY,KACvE,EAAKE,SAAS,CAAEV,SAASA,K,EAG3BW,gBAAkB,SAACpB,GACjB,IAAMS,EAAQ,YAAO,EAAKM,MAAMN,UAC1BY,EAAQZ,EAASa,QAAQtB,GAC/BS,EAASY,GAAT,eAAsBrB,GACtBS,EAASY,GAAOd,QAEhB,EAAKY,SAAS,CAAEV,c,EAKlBc,YAAc,WACZ,IAAMd,EAAW,EAAKM,MAAMN,SAASE,KAAK,SAAAX,GAExC,OADAA,EAAQO,MAAQ,EACTP,KAGT,EAAKmB,SAAS,CAACV,c,uDAKf,OACE,6BACE,kBAAC,EAAD,CACAd,aAAcG,KAAKiB,MAAMN,SAASS,QAAO,SAAAM,GAAC,OAAIA,EAAEjB,MAAQ,KAAIkB,SAE5D,0BAAM7B,UAAU,aACd,kBAAC,EAAD,CACAa,SAAUX,KAAKiB,MAAMN,SACrBC,QAASZ,KAAKyB,YACdxB,YAAaD,KAAKsB,gBAClBnB,SAAUH,KAAKkB,qB,GAhDPR,a,MCIlBkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SLsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8a0774e1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst NavBar =  (props) => {\r\n    \r\n    const { totalCounter } = props;\r\n    return (  \r\n            <nav className=\"navbar navbar-light bg-light m-2\" >\r\n                <span className=\"navbar-brand mb-0 h1\" >\r\n                    NavBar {''}\r\n        <span className=\"badge badge-secondary\">{totalCounter}</span>\r\n                </span>\r\n            </nav>\r\n    );\r\n}\r\n \r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n\r\n  // componentDidUpdate(prevprops, prevstate) {\r\n  //   console.log(\"props\", prevprops);\r\n  //   console.log(\"propstate\", prevstate);\r\n  // }\r\n\r\n  // componentWillUnmount() {\r\n  //   console.log(\"unmount\");\r\n  // }\r\n\r\n  render() {\r\n\r\n    const { onIncrement, counter, onDelete } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClasses()}> {this.formatCount()} </span>\r\n        <button\r\n          onClick={() => onIncrement(counter)}\r\n          className=\"btn btn-secondary btn-sm \"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => onDelete(counter.id)}\r\n          className=\"btn btn-danger m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    const { counter } = this.props;\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { counter } = this.props; \r\n    const value = counter.value;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass counters extends Component {\r\n  \r\n  render() {\r\n\r\n    const { onReset, counters, onDelete, onIncrement } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary m-2\">Reset</button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            counter={counter}\r\n            key={counter.id}\r\n            selected={true}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default counters;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter( counter => counter.id !== counterId );\n    this.setState({ counters:counters })\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = {...counter};\n    counters[index].value++;\n\n    this.setState({ counters });\n  }\n// handleIncrement = () => {\n//       this.setState({ value: this.state.value + 1 });\n//   }\n  handleReset = ( ) => {\n    const counters = this.state.counters.map( counter => {\n      counter.value = 0;\n      return counter;\n    })\n\n    this.setState({counters});\n  }\n\n\n  render() {\n    return (\n      <div>\n        <NavBar \n        totalCounter={this.state.counters.filter(c => c.value > 0 ).length}\n        />\n        <main className=\"container\">\n          <Counters \n          counters={this.state.counters}\n          onReset={this.handleReset}\n          onIncrement={this.handleIncrement}\n          onDelete={this.handleDelete}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App'\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// import \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}